package org.ofbiz.humanres;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.Map.Entry;
import java.util.GregorianCalendar;

import org.apache.log4j.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javolution.util.FastList;
import javolution.util.FastMap;

import org.ofbiz.base.util.Debug;
import org.ofbiz.base.util.UtilDateTime;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilProperties;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.entity.Delegator;
import org.ofbiz.entity.GenericEntityException;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.entity.condition.EntityCondition;
import org.ofbiz.entity.condition.EntityConditionList;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.entity.util.EntityFindOptions;
import org.ofbiz.entity.util.EntityListIterator;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.product.store.ProductStoreWorker;
import org.ofbiz.service.DispatchContext;
import org.ofbiz.service.GenericServiceException;
import org.ofbiz.service.LocalDispatcher;
import org.ofbiz.service.ModelService;
import org.ofbiz.service.ServiceUtil;

public class EmailServices {
	public static final String module = EmailServices.class.getName();
	static String defaultMailAgent = UtilProperties.getPropertyValue("general.properties", "defaultMailAgent");
	public static Map<String, Object> sendLeaveEmail(DispatchContext ctx, Map<String, ? extends Object> context, String fromId, String toId, String leaveAction) {
			
			Map<String, Object> result = FastMap.newInstance();
	   	 	Delegator delegator = ctx.getDelegator();
	        String partyId = toId;
	        String approverPartyId = fromId;
	        String sendFrom = "";
	        String sendToApproved = "";
	        String footerMessage = "This message is automatically generated by Contessa. If you think it was sent incorrectly, please contact your Contessa administrator.";
	        //Locale locale = (Locale) context.get("locale");
	        GenericValue userLogin = (GenericValue) context.get("userLogin");
	        
	        
	        String fromTitle = ""; //person or employee
	        String fromMailType = "";
	        String fromMailDescription = "";
	        String fromAction = "";
	        
	        String toTitle = ""; //hradmin or any other approver
	        String toMailType = "";
	        String toMailDescription = "";
	        String toAction = "";
	        
	        String successMessage = "";
	        
	        boolean emailSendToEmployee = false;
	        boolean emailSendToApprover = false;
	        
	       if (leaveAction.equals("LEAVE_CREATED")){
	        	
	        	emailSendToEmployee = true;
	        	emailSendToApprover = true;
	        	
	        	fromTitle = "Contessa Leave Apply Notification";
	        	fromMailType = "Leave Apply";
	        	fromMailDescription = "Apply for leave";
	        	fromAction= "Wait for approval and you will get the notificaton soon";
	        	
	        	toTitle =  "Contessa Leave Request Notification";
	        	toMailType = "Leave Request";
	        	toMailDescription = "Apply for leave and requested to approve";
	        	toAction = "This Request can be checked /humanres/control/EmplLeavesListForApproval here";
	        	
	        	successMessage = "Leave Applied Successfully";
	            
	        }else if (leaveAction.equals("LEAVE_REJECTED")){
	        	
	        	emailSendToEmployee = true;
	        	emailSendToApprover = true;
	        	
	        	fromTitle = "Contessa Leave Rejected Notification";
	        	fromMailType = "Leave Rejected";
	        	fromMailDescription = "Applied leave is rejected";
	        	fromAction = "Please check your leave in your profile";
	        	
	        	toTitle =  "Contessa Leave Rejected Notification";
	        	toMailType = "Leave Reject";
	        	toMailDescription = "Applied leave is rejected";
	        	toAction = "Please check your leave in your profile";
	        	
	        	successMessage = "Applied Leave is rejected";
	        
	        } else if (leaveAction.equals("LEAVE_REVIEWED")){
	        	
	        	emailSendToEmployee = false;
	        	emailSendToApprover = true;
	        	
	        	toTitle =  "Contessa Leave Reviewed Notification";
	        	toMailType = "Leave Request to Review";
	        	toMailDescription = "Apply for leave and requested to review";
	        	toAction = "This Request can be checked /humanres/control/EmplLeavesListForApproval here";
	        	
	        	successMessage = "Applied Leave is reviewed";
	            
	        }  else if (leaveAction.equals("LEAVE_WAIT_FOR_APPR")){
	        	
	        	emailSendToEmployee = false;
	        	emailSendToApprover = true;
	        	
	        	toTitle =  "Contessa Leave Approval Notification";
	        	toMailType = "Leave Request to Approve";
	        	toMailDescription = "Apply for leave and requested to approve";
	        	toAction = "This Request can be checked /humanres/control/EmplLeavesListForApproval here";
	        	
	        	successMessage = "Applied Leave is waiting for approval";
	            
	        } else if (leaveAction.equals("LEAVE_APPROVED")){
	        	
	        	emailSendToEmployee = true;
	        	emailSendToApprover = true;
	        	
	        	fromTitle = "Contessa Leave Approved Notification";
	        	fromMailType = "Leave Approved";
	        	fromMailDescription = "Applied leave is approved";
	        	fromAction= "Please check your leave in your profile";
	        	
	        	toTitle =  "Contessa Leave Acceptance Notification";
	        	toMailType = "Leave Acceptance";
	        	toMailDescription = "Applied leave is accepted";
	        	toAction = "This Request can be checked /humanres/control/EmplLeavesListForApproval here";
	        	
	        	successMessage = "Applied Leave is approved";
	            
	        } else if (leaveAction.equals("LEAVE_RECOMMENDED")){
	        	
	        	emailSendToEmployee = false;
	        	emailSendToApprover = true;
	        	
	        	fromTitle = "Contessa Leave Recommend Notification";
	        	fromMailType = "Leave Recommended";
	        	fromMailDescription = "Applied leave is Recommended";
	        	fromAction= "Please check your leave in your profile";
	        	
	        	toTitle =  "Contessa Leave Recommend Notification";
	        	toMailType = "Leave Recommendation";
	        	toMailDescription = "Applied leave is recommended";
	        	toAction = "This Request can be checked /humanres/control/EmplLeavesListForApproval here";
	        	
	        	successMessage = "Applied Leave is recommended";
	            
	        }
	        
	      
			/* if (UtilValidate.isEmpty(partyId)) {
	             return ServiceUtil.returnError(UtilProperties.getMessage(ServiceUtil.resource, "serviceUtil.party_id_missing", locale));
	         }*/
			
			 /*//get the sendFrom value using partyId
			 sendFrom = getEmailByParty(delegator, partyId);
			 if (sendFrom.trim().equals(""))
				successMessage = successMessage.concat(", Employee Email is not found");
			
			//get the sendTo value using approverPartyId
			sendToApproved = getEmailByParty(delegator, approverPartyId);
			if (sendToApproved.trim().equals(""))
				successMessage = successMessage.concat(", Approver Email is not found");*/
		
			//send email to human admin
	         Map<String, Object> emailCtx = FastMap.newInstance();
	
	         //set the body parameters
	         Map<String, Object> bodyParameters = FastMap.newInstance();
	         
	         /*bodyParameters.put("title", toTitle);
	         bodyParameters.put("mailType", toMailType);
	         bodyParameters.put("mailDescription", toMailDescription);
	         bodyParameters.put("action", toAction);
	         bodyParameters.put("priority", "High");
	         bodyParameters.put("footerMsg", footerMessage);
	         
	          emailCtx.put("sendTo", sendToApproved);
	          emailCtx.put("sendFrom",sendFrom);
	          emailCtx.put("userLogin", userLogin);
	          emailCtx.put("bodyParameters", bodyParameters);
	       
	         if (emailSendToApprover && !sendToApproved.equals("")){
		         try {
		        	 sendContessaMail(ctx, emailCtx,bodyParameters);
		        	 
		         } catch (Exception e) {
		         }
	         }*/
	       
	         //send mail to requested person
	         bodyParameters.put("title", fromTitle);
	         bodyParameters.put("mailType", fromMailType);
	         bodyParameters.put("mailDescription", fromMailDescription);
	         bodyParameters.put("action", fromAction);
	         bodyParameters.put("priority", "High");
	         bodyParameters.put("footerMsg", footerMessage);
	         
	          emailCtx.put("sendTo", "imtutul@yahoo.com");
	          emailCtx.put("sendFrom",defaultMailAgent);
	          emailCtx.put("userLogin", userLogin);
	          emailCtx.put("bodyParameters", bodyParameters);
	          
	          
		         try {
		        	 sendContessaMail(ctx, emailCtx,bodyParameters);
		        	 
		         } catch (Exception e) {
		             //return ServiceUtil.returnError("send email failed");
		 			successMessage = successMessage.concat(", Send Email failed");
	
		 			 }
	          
	          
			result.put(ModelService.RESPONSE_MESSAGE, ModelService.RESPOND_SUCCESS);
	        result.put(ModelService.SUCCESS_MESSAGE, successMessage);
	        /*result.put(ModelService.ERROR_MESSAGE, "Leave will not proceed due to some error.");*/
	        
	   	  return result;
	   	  
		}
		
		
		
	public static String getEmailByParty(Delegator delegator, String partyId){
		
		String email = "";
		
		try {
			List<GenericValue> listPartyContactMechs = delegator.findList("PartyContactMech", EntityCondition.makeCondition("partyId", EntityOperator.EQUALS, partyId),null,null,null,false);
			String contactMechIdToCheck = "";
			GenericValue contactMech = null;
			for(GenericValue val : listPartyContactMechs){
				contactMechIdToCheck = (String)val.get("contactMechId");
				List<EntityExpr> exprs = FastList.newInstance();
	            exprs.add(EntityCondition.makeCondition("contactMechId", EntityOperator.EQUALS, contactMechIdToCheck));
	            exprs.add(EntityCondition.makeCondition("contactMechTypeId", EntityOperator.EQUALS, "EMAIL_ADDRESS"));
				
				List<GenericValue> listContactMechs = delegator.findList("ContactMech", EntityCondition.makeCondition(exprs, EntityOperator.AND),null,null,null,false);
				if (listContactMechs.size()>0) {
					contactMech = listContactMechs.get(0);
				}
				
			}
		
			if (contactMech != null)
				email = (String) contactMech.get("infoString");
			
			if (email == null) email = "";
			
			
		} catch (GenericEntityException e) {}
	
	
		return email;
	
	}
		
	public static Map<String, Object> sendContessaMail(DispatchContext ctx, Map<String, ?> serviceContext, Map<String, ?> bodyParam) {
	    Map<String, Object> result = FastMap.newInstance();
	    Delegator delegator = ctx.getDelegator();
	    LocalDispatcher dispatcher = ctx.getDispatcher();
	    // get the general template
	    GenericValue emailTemplateSetting = null;
	    try {
	        emailTemplateSetting = delegator.findOne("EmailTemplateSetting", true, "emailTemplateSettingId", "GEN_EMAIL_TEMPLATE");/**/
	    } catch (GenericEntityException e1) {
	        Debug.logError(e1, module);
	    }
	
	    //set the body parameters
	    Map<String, Object> parameters = FastMap.newInstance();
	
	    parameters.put("title", bodyParam.get("title"));
	    parameters.put("mailType", bodyParam.get("mailType"));
	    parameters.put("mailDescription", bodyParam.get("mailDescription"));
	    parameters.put("action", bodyParam.get("action"));
	    parameters.put("priority", bodyParam.get("priority"));
	    parameters.put("actionUrl", bodyParam.get("actionUrl"));
	    parameters.put("footerMsg", bodyParam.get("footerMsg"));
	
	    //set the email context
	    Map<String, Object> emailCtx = FastMap.newInstance();
	    emailCtx.put("sendTo", serviceContext.get("sendTo"));
	    emailCtx.put("sendFrom", serviceContext.get("sendFrom"));
	    emailCtx.put("sendCc", serviceContext.get("sendCc"));
	    emailCtx.put("emailTemplateSettingId", emailTemplateSetting.getString("emailTemplateSettingId"));
	    emailCtx.put("userLogin", serviceContext.get("userLogin"));
	    emailCtx.put("bodyParameters", parameters);
	
	    // send off the email async so we will retry on failed attempts
	    // SC 20060405: Changed to runSync because runAsync kept getting an error:
	    // Problem serializing service attributes (Cannot serialize object of class java.util.PropertyResourceBundle)
	    try {
	        dispatcher.runAsync("sendMailFromTemplateSetting", emailCtx);
	    } catch (GenericServiceException e) {
	        Debug.logError(e, "Problem sending mail", module);
	        // this is fatal; we will rollback and try again later
	        return ServiceUtil.returnError("send email failed");
	    }
	
	    return result;
	}	
		
	
	/*public static Map<String, Object> leaveNotificationMailSending(DispatchContext dctx, Map<String, ?> values) {
		 
	   Map<String, Object> result = FastMap.newInstance();
	   LocalDispatcher dispatcher = dctx.getDispatcher();
	   Delegator delegator = dctx.getDelegator();
	   Map<String, Object> parameters = FastMap.newInstance();
	
	   Date date = new Date();
	   Timestamp todayDate = new Timestamp(date.getTime());
	   String partyId = (String) values.get("partyId");
	   String approverPartyId = (String) values.get("approverPartyId");
	   String mailerPartyId = (String) values.get("mailerPartyId");
	   List<GenericValue> partyPersonnalInfo = null;
	   List<GenericValue> notifiedUserList = null;
	   List<GenericValue> userList = null;
	   List<GenericValue> userEmail = null;
	
	   GenericValue emailTemplateSetting = null;
	   Map<String, Object> bodyParameters = FastMap.newInstance();
	   Map<String, Object> emailCtx = FastMap.newInstance();
	   
	   
	   // ------------------Find Party Information-------------------------------- 
	   
	   try {
	       notifiedUserList = delegator.findByAnd("ProcessStepNotifications", UtilMisc.toMap("stepId", processStepId ,"stepFilter",leaveAction));
	   } catch (GenericEntityException e) {
	       e.printStackTrace();
	   } 
	   for (GenericValue value : notifiedUserList) {
	       try {
	    	     userEmail = delegator.findByAnd("PartyAndContactMech", UtilMisc.toMap("partyId", value.get("notifiedParty").toString(), "contactMechTypeId", "EMAIL_ADDRESS"));
	       } catch (GenericEntityException e) {
	           e.printStackTrace();
	       }
	       for (GenericValue email : userEmail) {
	    	   
	    	   try {
	    	       userList = delegator.findByAnd("UserLoginSecurityGroup", UtilMisc.toMap("userLoginId",value.get("notifiedPerson").toString() ,"groupId", "HUMANRES_EXEC"));
	    	   } catch (GenericEntityException e) {
	    	       e.printStackTrace();
	    	   }
	
	           if(!userList.isEmpty()) {
	        	   try {
	       			Map<String, Object> values = FastMap.newInstance();
	       	        values.put("approverPartyId", approverPartyId);
	       	        values.put("partyId", partyId);
	       	        values.put("leaveAction", "LEAVE_WAIT_FOR_APPR");
	       	        values.put("userLogin", userLogin);
	       	        
	       			result = EmailServices.leaveNotificationMailSending(dctx, values);
	       		} catch (Exception e) {
	       			e.printStackTrace();
	       		}
	           }
	       }
	   }	
	   //result.put("_EVENT_MESSAGE_", "Mail send success");
	   return result;
	}*/
	public static Map<String, Object> leavePartyNotificationMailSending(DispatchContext dctx, Map<String, ?> values) {
	
	   Map<String, Object> result = FastMap.newInstance();
	   LocalDispatcher dispatcher = dctx.getDispatcher();
	   Delegator delegator = dctx.getDelegator();

	   GenericValue emailTemplateSetting = null;
	   Map<String, Object> bodyParameters = FastMap.newInstance();
	   Map<String, Object> emailCtx = FastMap.newInstance();
	   
	   Map<String, Object> parameters = FastMap.newInstance();
	   String toMailPartyId = (String) values.get("toMailPartyId");
	   String appliedPartyId = (String) values.get("appliedPartyId");
	   String leaveAction =(String) values.get("leaveAction");
	   String partyId = (String) values.get("partyId");
	   String footerMessage = "This message is automatically generated by Contessa. If you think it was sent incorrectly, please contact your Contessa administrator.";
	   String mailDescription="";
	   String approverPartyID = "";
	  /* String toMailPartyId = "";*/
	  String partyName=LeaveEvents.getFullNameByPartyId(delegator, partyId);
	  //
      if (leaveAction.equals("LEAVE_REJECTED")){
    	  mailDescription="Your leave request has been rejected"; 
    	  toMailPartyId = partyId;
      }else if (leaveAction.equals("LEAVE_WAIT_FOR_APPR")){
    	  mailDescription="Leave request of "+partyName+" is waiting for your approval";
    	  
      } else if (leaveAction.equals("LEAVE_APPROVED")){

    	  mailDescription=partyName+"'s leave request has been approved";  
          
      } else if (leaveAction.equals("LEAVE_APPROVED_STEP")){
    	  approverPartyID = values.get("approverPartyId").toString();
    	  String authPartyName=LeaveEvents.getFullNameByPartyId(delegator, approverPartyID);
    	  mailDescription="Your leave request has been confirm by "+ authPartyName +". Now waiting for next Step Approval"; 
    	  
    	  toMailPartyId = partyId;
      }
      else if (leaveAction.equals("LEAVE_APPROVED_FINAL")){
    	  approverPartyID = values.get("approverPartyId").toString();
    	  String authPartyName=LeaveEvents.getFullNameByPartyId(delegator, approverPartyID);
    	  mailDescription="Your leave request has been Approved"; 
    	  
    	  toMailPartyId = partyId;
      }
      else if (leaveAction.equals("LEAVE_STA_FOR_ALL")){
    	  approverPartyID = values.get("approverPartyId").toString();
    	  String authPartyName=LeaveEvents.getFullNameByPartyId(delegator, approverPartyID);
    	  mailDescription="Leave request of "+partyName+" is approved by "+ authPartyName;
    	  
      }else if (leaveAction.equals("LEAVE_NEXT_FOR_ALL")){
    	  approverPartyID = values.get("approverPartyId").toString();
    	  String authPartyName=LeaveEvents.getFullNameByPartyId(delegator, approverPartyID);
    	  mailDescription="Leave request of "+partyName+" is finally approved by "+ authPartyName;
    	  
      }else if (leaveAction.equals("LEAVE_STA_REJECTED")){
    	  approverPartyID = values.get("approverPartyId").toString();
    	  String authPartyName=LeaveEvents.getFullNameByPartyId(delegator, approverPartyID);
    	  mailDescription="Leave request of "+partyName+" is rejected by "+ authPartyName;
    	  
      }
	   bodyParameters.put("footerMsg", footerMessage);
	   bodyParameters.put("mailDescription", mailDescription);   
	   
	   
	   String senderPartyEmail=getEmailByParty(delegator, toMailPartyId);
	   emailCtx.put("sendFrom", defaultMailAgent);
	   emailCtx.put("sendTo", senderPartyEmail);
	   emailCtx.put("userLogin", values.get("userLogin"));
	   emailCtx.put("bodyParameters", bodyParameters);	
	   try {
	       sendMailByOfbizMailServer(dctx, emailCtx, bodyParameters);
	   } catch (Exception e) {
	       Debug.logError(e, "Problem sending mail", module);
	   }	
	   //result.put("_EVENT_MESSAGE_", "Mail send success");
	   return result;
	}
	public static Map<String, Object> sendMailByOfbizMailServer(DispatchContext ctx, Map<String, ?> context, Map<String, ?> bodyParam) {
		
		Map<String, Object> result = FastMap.newInstance();
	    Delegator delegator = ctx.getDelegator();
	    LocalDispatcher dispatcher = ctx.getDispatcher();
	    Locale locale = (Locale) context.get("locale");
	    Map<String, Object> emailCtx = FastMap.newInstance();
	  
	    // get the general template
	   
	 
	    GenericValue emailTemplateSetting = null;
	  
	    try {
	        emailTemplateSetting = delegator.findOne("EmailTemplateSetting", true, "emailTemplateSettingId", "GEN_EMAIL_TEMPLATE");/**/
	    } catch (GenericEntityException e1) {
	        Debug.logError(e1, module);
	    }
	    
	   
	    
	    Map<String, Object> parameters = FastMap.newInstance();
	    
	    parameters.put("title", bodyParam.get("title"));
	    parameters.put("mailType", bodyParam.get("mailType"));
	    parameters.put("mailDescription", bodyParam.get("mailDescription"));
	    parameters.put("action", bodyParam.get("action"));
	    parameters.put("priority", bodyParam.get("priority"));
	    parameters.put("actionUrl", bodyParam.get("actionUrl"));
	    parameters.put("footerMsg", bodyParam.get("footerMsg"));
	    parameters.put("fullName", bodyParam.get("fullName"));
	    parameters.put("remarks", bodyParam.get("remarks"));	    
	    //set the email context	    
	    emailCtx.put("sendTo", context.get("sendTo"));	 
	    emailCtx.put("emailTemplateSettingId", emailTemplateSetting.getString("emailTemplateSettingId"));
	    emailCtx.put("userLogin", context.get("userLogin"));
	    emailCtx.put("bodyParameters", parameters);
	    Map<String, Object> tmpResult = null;
	    
	    try {
	        dispatcher.runAsync("sendMailFromTemplateSetting", emailCtx);
	    } catch (GenericServiceException e) {
	        Debug.logError(e, "Problem sending mail", module);
	        // this is fatal; we will rollback and try again later
	        return ServiceUtil.returnError("send email failed");
	    }
		
	    return result;
	}
	    
	    
}